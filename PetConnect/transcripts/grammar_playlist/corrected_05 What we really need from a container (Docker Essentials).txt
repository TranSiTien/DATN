We know that virtual machines isolate environments, but with the cost right there, does it cost the chip to pay all right? And we don't want to pay the cost. So, what do we really need? What we need is isolating environments I talked about, environments being a part of your application, right? That's the main problem we have: an ability to test the app, but we don't have an ability to standardize and test environments. Also, we don't have an ability to isolate these environments. So, that's kind of what we really need, right? We look at virtual machines; we are running an operating system, okay? What we need is to run just a process, just an app. That's all we need, right? If what we need is to run an operating system and to play around with it, the virtual machines are perfect. I'm not slacking, you know, I'm not criticizing virtual machines, right? They're great, and they're still going to be used, but that's only if you want to run and know it's like you don't want to run Windows; you just want to run your app, right? So, what virtual machines do is they virtualize hardware in order to run a full operating system. What we need is, if possible, to virtualize an operating system to run a process. Okay, that's really what we need; is this possible is a question, okay?

So, what do we mean by isolating processes, all right? What do we need to do when you have an application in Java or C sharp or whatever application? What exactly does isolating a process mean, okay? When a process is running, we want to be able to separate file systems. That's a good start, right? One process is running; it doesn't, we don't want it to run and create files or delete files from another process. That's a good thing to do, right? Have separate views of the file system. The other thing is we want a separation of the installed apps and runtimes, right? Whatever, like Java or some binaries installed on your machine, you want to make sure that they are separate, okay? This app needs Java 14; this app needs Java 17 should be fine. This app needs curl installed; this app needs wget different version installed; well, that should be fine, right? So, that separation is needed. The third thing we need is a separation of running processes. One app shouldn't be able to issue a kill command to kill all the other applications and end up killing another app that you're supposed to run. Well, that shouldn't happen, right? It needs to have a separate view of the currently running processes. And finally, it needs to have a separation of resource usage. We talked about runaway processes; one app consumes a lot of memory; it shouldn't choke the other app, right? It should have its own view of resources, right? Do you agree that this is kind of a fair level of isolation? Like if we have this, your application is kind of good to go, like you're kind of jailing your app and providing it everything it needs as a set like a wrapper around it, right?

It turns out all of these are actually possible in Linux. You can run an app with this kind of isolation in Linux but using various different tools, okay? A lot of different tools. Essentially, I'm going to talk about three technologies which kind of make this happen, okay? The first one is something called chroot. Some people call it jroot; I'm not going to call it that. I'm going to call it chroot. This is one way of providing some kind of jailing, some kind of isolation. But the second technology is something called namespaces, and the third technology is something called control groups, right? Some of these technologies are actually the foundations of container technology, including Docker today, all right? Not all of these are very well used; for example, chroot is not very, I think it's not used for Docker. Docker uses something else called pivot route, I believe. It might use something else tomorrow. But the reason I'm highlighting chroot here is it's a good introduction to kind of put that idea in your head about how containers work because people don't quite get the idea behind containers unless they've seen how chroot works, right? This has happened before, you know, people have been confused like what's the difference between VMs and containers? Well, let me explain to you how chroot works. Once you know, once you've seen that, you will kind of get an idea of what this is, right? It's basically the idea of jailing, and nothing illustrates it better than chroot, which I'm going to demo now.