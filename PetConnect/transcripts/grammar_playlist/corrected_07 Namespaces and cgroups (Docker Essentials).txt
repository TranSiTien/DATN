Now, I talked about how there are three different features. Chroot is one thing, and there are other variants of this feature which allow you to do a lot of similar stuff. The second thing I want to talk about is something called namespaces. Alright, namespaces are a feature of the Linux kernel that partitions kernel resources so that one set of processes sees one set of resources while another set of processes sees another set of resources. Perfect, this is what we want. There is this feature called namespaces in Linux already. Now, don't get me wrong, with the popularity of containers, many of these features have been updated and improved to handle the container use case. However, people have been using namespaces for quite a while. And if you don't believe me, I'll give you some examples of namespace types.

For example, when you log in as a user and you have your own top-level process and you create a child process, there is another user who's creating another child process. Both of you are not admins, right? You have your own user rights. Can you, as a user, kill the child process that some other user created? They probably don't have the rights to do that. You can set it in such a way that you don't even see the process that someone else has created. When multiple users are logging into the same machine, you have your own worldview of just the processes that you create. You cannot see the processes of someone else, right? You're kind of doing process-level virtualization already. You have your own worldview of your processes. User ID namespaces, process ID namespaces, you have child-parent processes, and a child process a parent process creates a child process. Now, that parent process can kill it, but that parent process cannot see a child process created by some other process. Now, we have process-level isolation, right? This is already there and this affects things other than just creating processes. It affects the ability to see processes, the visibility, it affects the ability to stop processes, and so on. So, namespaces are a thing in Linux, which we kind of already know, but we haven't quite applied it to the idea of isolation in an application level that we have been talking about here, right?

So, namespaces, yeah, there are different types of namespaces. Linux starts with a single process namespace per type. Okay, so you have different namespaces like user ID namespaces, process namespaces. Linux starts or Unix has one process per namespace and it kind of starts with that, and each process can create or join more namespaces. Like I talked about, you create a process, you have your own user ID namespace for that process, and you can go from there. You can create children and children and so on. So, now we've looked at two of them, right? We have chroot, which provides path and file isolation, and you have namespaces, which provide process and resource isolation. Again, like I said, chroot is not used anymore. It is just something that I chose for illustration. Whatever technology that containers use, you have a way of achieving file-level isolation.

Now, closely associated with the namespace isolation is something called cgroups. Okay, cgroup is technically a flavor of namespaces. So, cgroup is basically control groups, a Linux kernel feature that limits, accounts for, and isolates resource usage like CPU, memory, disk I/O, network, etc., of a collection of processes. You can say, "I'm going to take this set of processes and this is going to get just two of the cores of my CPU. The other three cores go to this set of processes." Alright, so this is possible using control groups. Similarly, you can partition memory, disk I/O, network, and all that stuff.

Now, we have these three features: file and path isolation, namespaces, and cgroups. Technically interdependent features, but these are super important for containers. Now, with these three, we can have applications that run in their own file system, their own process space, and their own resources.

Now, let's look back at our requirements for what we needed from containers, right? We needed separation of file system, separation of installed apps and runtimes, and separation of processes and resource usage. Right, we saw this before and we said, "Well, this is what we need to run containers in isolated environments." Okay, but we've got this. We've got the first one. The first two are achievable with chroot or whatever is the flavor of this feature that we are using with containers these days. The second and third are namespaces and cgroups. We've got this. Okay, so now, using this feature, you can imagine you run a process applying all of these things, right? Applying chroot, applying namespaces, and all that stuff. Well, now you technically got containerization