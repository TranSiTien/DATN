Bare metal to VM. I don't know if you folks know what bare metal is. It's a common term that's used in DevOps and software engineering in general. Bare metal basically means running your application and operating system on the hardware directly. You might ask, "How else can you run it?" Well, the other way is using a virtual machine. Provisioning physical hardware is the old-school way of doing things. Previously, maybe 15-20 years ago, if you had a business and an application that needed to run in production for others to use, you had to buy hardware. And I don't mean buying hardware by clicking buttons and making it happen. No, you had to talk to the vendor, have the hardware shipped to your data center location, have a physical human being carry that server, put it on a rack, and then run software on it, install the operating system manually, and check everything. This is provisioning physical hardware. What are the things you need to do? You need to procure hardware, monitor it on server racks, have new hardware per application (you can't run multiple applications on the same hardware), and plan for peak capacity. 

As a CTO setting up hardware for your e-commerce website, you don't plan for average load because you need to handle peak capacity. This is because you want to make use of opportunities when your website becomes popular and traffic increases. Running multiple applications on one machine can lead to problems such as conflicting runtimes, applications competing for resources, and unknown dependencies. 

The non-ideal solution is to have separate servers per app, which are slow and require provisioning. Instead, you can use virtual machines. Virtual machines are a breakthrough solution that allows you to run multiple applications on the same machine without worrying about peak capacity or one app interfering with another. People were excited when virtual machines became mainstream, thanks to the work done by VMware and the popularization of VirtualBox as an open-source solution for virtual machines.