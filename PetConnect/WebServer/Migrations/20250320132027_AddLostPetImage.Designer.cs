// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetConnect.Data;

#nullable disable

namespace PetConnect.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250320132027_AddLostPetImage")]
    partial class AddLostPetImage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetConnect.Data.Models.GeneralUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("GeneralUsers");
                });

            modelBuilder.Entity("PetConnect.Data.Models.LostPet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)");

                    b.Property<Guid>("FinderId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastSeenDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Point>("LastSeenLocation")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("ModeratorFeedback")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FinderId");

                    b.HasIndex("LastSeenDateTime")
                        .HasDatabaseName("IX_LostPet_LastSeenDateTime");

                    b.HasIndex("LastSeenLocation")
                        .HasDatabaseName("IX_LostPet_LastSeenLocation");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("LastSeenLocation"), "GIST");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_LostPet_Status");

                    b.ToTable("LostPets");
                });

            modelBuilder.Entity("PetConnect.Data.Models.LostPetImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LostPetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("LostPetId");

                    b.ToTable("LostPetImage");
                });

            modelBuilder.Entity("PetConnect.Data.Models.LostPet", b =>
                {
                    b.HasOne("PetConnect.Data.Models.GeneralUser", "Finder")
                        .WithMany("LostPets")
                        .HasForeignKey("FinderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Finder");
                });

            modelBuilder.Entity("PetConnect.Data.Models.LostPetImage", b =>
                {
                    b.HasOne("PetConnect.Data.Models.LostPet", "LostPet")
                        .WithMany("Images")
                        .HasForeignKey("LostPetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LostPet");
                });

            modelBuilder.Entity("PetConnect.Data.Models.GeneralUser", b =>
                {
                    b.Navigation("LostPets");
                });

            modelBuilder.Entity("PetConnect.Data.Models.LostPet", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
